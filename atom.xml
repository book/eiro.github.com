<?xml version="1.0" encoding="UTF-8"?><feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom"><updated>2014-02-15T11:55:23+01:00</updated><id>tag:eiro,2014</id><author>Marc Chantreux</author><title>... but maybe i'm wrong</title><entry><id>tag:eiro,news,2014-02-15T11:55:23+01:00,fosdem_sequel_c_11_scrum_</id><title>FOSDEM sequel: C++11, scrum, ...</title><content type="html">&lt;p&gt;Once again, i came to &lt;a href=&quot;https://fosdem.org/2014/&quot;&gt;FOSDEM&lt;/a&gt; with some talks in mind, missed them and learnt a lot of new, completly different things.&lt;/p&gt;
&lt;p&gt;Once again, FOSDEM is the echo of my internet feeds (at this point, the cultural spectrum of the people i spoke to is too large to just say we&#39;re reading the same blogs).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* the rise of the functionnal programming for the masses 
* the rise of the &amp;quot;let&amp;#39;s fire all managers&amp;quot; movement (coming from both
  scrum and open source as &amp;quot;working models&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The big surprise for me is a very interesting discution about the modern paradigms of C++. I realized i was acting like the &amp;quot;perl is dead&amp;quot; people: comparing C++ from nineties to the very last features of the langages i use daily: I was not unfair, just ignorant.&lt;/p&gt;
&lt;p&gt;So i began to read the C++ posts again and seen &lt;a href=&quot;http://nathan.ca/2014/02/type-rich-programming/&quot;&gt;this article&lt;/a&gt; pointing on &lt;a href=&quot;http://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Keynote-Bjarne-Stroustrup-Cpp11-Style&quot;&gt;Bjarne Stroustrup: C++11 Style&lt;/a&gt; which is a very interesting talk about what the &amp;quot;good C++&amp;quot; should be.&lt;/p&gt;
</content><published>2014-02-15T11:55:23+01:00</published><updated>2014-02-15T11:55:23+01:00</updated></entry><entry><id>tag:eiro,news,2014-01-31T10:15:57+01:00,adieu_jekyll_i_dumped_you_for_a_28_lines_makefile_</id><title>adieu, Jekyll (i dumped you for a 28 lines Makefile)</title><content type="html">&lt;p&gt;Months ago, and once again, i spent hours to figure out how to do things i expected to be simple. In this case, Jekyll isn&#39;t the one to blame: the ruby ecosystem is. I&#39;m a happy &lt;a href=&quot;https://metacpan.org/&quot;&gt;CPAN&lt;/a&gt; user and contributor as well as &lt;a href=&quot;http://www.haskell.org/cabal/&quot;&gt;cabal&lt;/a&gt; happy user. Coming from those world, the ruby one is quiet messy.&lt;/p&gt;
&lt;p&gt;So i decided to throw all the blog/wiki engines away, running a temporary solution with the simplest bootstrap i can write. Following the rules of the unix &lt;a href=&quot;http://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS principles&lt;/a&gt;, i divided the &amp;quot;CMS&amp;quot; problem more little ones. I needed something as simple as possible to extend coming with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a content generator&lt;/li&gt;
&lt;li&gt;a conductor to drive it&lt;/li&gt;
&lt;li&gt;a responsive design&lt;/li&gt;
&lt;li&gt;a web browsable SCM&lt;/li&gt;
&lt;li&gt;an atom generator&lt;/li&gt;
&lt;li&gt;a discus-like comment system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so i choose the simplest (or best) tools i know for each task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt; to generate html content from md files. I don&#39;t know about the internals but both the CLI tool and the haskell API are very pleasant to use.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/000095399/utilities/make.html&quot;&gt;make&lt;/a&gt; is my conductor. As i really expect the every so-called unix users have the basics of make. It get the job done for many decades now. I also have a look on mk from &lt;a href=&quot;http://tools.suckless.org/9base&quot;&gt;the 9base&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.wiki.kernel.org&quot;&gt;git&lt;/a&gt; as SCM, lot of tools out there to browse it from the web.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://unsemantic.com/&quot;&gt;Unsemanic CSS framework&lt;/a&gt;. I don&#39;t know a lot about web development but i was aware about &lt;a href=&quot;http://en.wikipedia.org/wiki/Responsive_web_design&quot;&gt;Responsive web design&lt;/a&gt; and saw the ancestor of unsemantic was in the roadmap of &lt;a href=&quot;http://werc.cat-v.org/&quot;&gt;werc&lt;/a&gt; (when it comes to simplicity, you really can trust the &lt;a href=&quot;http://cat-v.org/&quot;&gt;cat-v&lt;/a&gt; Ayatollahs^wpeople)&lt;/li&gt;
&lt;li&gt;more recently, i wrote &lt;a href=&quot;https://github.com/eiro/app-atombomb&quot;&gt;atombomb&lt;/a&gt; to add atom feeds to some sites.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so the workflow is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a new md for a new page&lt;/li&gt;
&lt;li&gt;manually maintain the atom feed ( &lt;a href=&quot;https://github.com/eiro/eiro.github.com/blob/master/Makefile&quot;&gt;atombomb format&lt;/a&gt; is quiet helpfull for this part)&lt;/li&gt;
&lt;li&gt;run make to build a section&lt;/li&gt;
&lt;li&gt;git submodules to add subsection&lt;/li&gt;
&lt;li&gt;rsync or git to push on the server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;you can see all the revision by using a git browser (like the github one) and i plan to use an ajax call the powerfull &lt;a href=&quot;http://sympa.org&quot;&gt;sympa list manager&lt;/a&gt; to run a discus-like comment system.&lt;/p&gt;
&lt;p&gt;Months passed and it became clear i will not step back: those 62 LOC (it takes less than 5 minutes to understand the whole thing) never desapointed me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the publishing process is faster and easier&lt;/li&gt;
&lt;li&gt;i use the :make command of vim&lt;/li&gt;
&lt;li&gt;my working directory is served by a local http server&lt;/li&gt;
&lt;li&gt;everything is relative to the working directory: if it renders well here, it will render well offline. faster and easier local preview before pushing&lt;/li&gt;
&lt;li&gt;so easy to extend i never was stuck by a new problem, i just had to write some few extra lines in the Makefile to get new features like&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt; and &lt;a href=&quot;http://ditaa.sourceforge.net/&quot;&gt;ditaa&lt;/a&gt;) support&lt;/li&gt;
&lt;li&gt;beamer slides (using the theme of my university).&lt;/li&gt;
&lt;li&gt;render html report from external sources (just use pandoc md as intermediate representation and run make)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually, even my todolist/notes system is now based on it (in combination with vim and mutt i&#39;ll explain in another post) and as always, i realized how happy i am when i follow the rules of the unix &lt;a href=&quot;http://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS principles&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;
    # wc -l M* t* 
      28 [Makefile](https://github.com/eiro/eiro.github.com/blob/master/Makefile)
      27 [template.html5](https://github.com/eiro/eiro.github.com/blob/master/template.html5)
       7 theme.css
      62 total
&lt;/pre&gt;

&lt;p&gt;the only thing i was afraid was &amp;quot;all is relative to the working directory&amp;quot; thing: i copy the css files for each new section. suprisingly, it has benefic effects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i think twice before adding a section and it keep me aware of the content.&lt;/li&gt;
&lt;li&gt;the local CSS actually import a stylesheet shared by all the sites i manage so i can easily&lt;br /&gt; maintain the whole stuff.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So another unix principle is at work here: &amp;quot;Premature optimization is the root of all evil&amp;quot;. Thanks Donald!&lt;/p&gt;
</content><published>2014-01-31T10:15:57+01:00</published><updated>2014-01-31T10:15:57+01:00</updated></entry><entry><id>tag:eiro,news,2014-01-18T22:08:52+01:00,atom_bomb_first_test</id><title>atom bomb first test</title><content type="html">&lt;p&gt;i decided to push a repository on github with all those tests and notes that can maybe become a project some day and named it &lt;a href=&quot;https://github.com/eiro/labo/&quot;&gt;labo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;this feed is generated with &lt;a href=&quot;https://github.com/eiro/app-atombomb&quot;&gt;atom bomb&lt;/a&gt; and the &lt;a href=&quot;https://github.com/eiro/app-atombomb/blob/master/t/feed&quot;&gt;feed file&lt;/a&gt; i just maintain manually with vim and &lt;a href=&quot;https://github.com/eiro/uze/blob/master/atombomb&quot;&gt;simple zsh helper&lt;/a&gt; to create headers.&lt;/p&gt;
&lt;p&gt;atom bomb (i&#39;m not sure about the name) is written in &lt;a href=&quot;http://www.perl.org/&quot;&gt;perl5&lt;/a&gt; and &lt;a href=&quot;https://metacpan.org/pod/release/MARCC/eirotic-0.0/lib/Eirotic.pm&quot;&gt;Eirotic.pm&lt;/a&gt; which replace my common boilerplate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://metacpan.org/release/perlude&quot;&gt;Perlude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://metacpan.org/pod/Method::Signatures&quot;&gt;Method::Signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;perl 5.14 with strictures&lt;/li&gt;
&lt;li&gt;YAML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;markdown conversion is made by &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt;.&lt;/p&gt;
</content><published>2014-01-18T22:08:52+01:00</published><updated>2014-01-18T22:08:52+01:00</updated></entry><entry><id>tag:eiro,news,2014-01-17T13:24:08+01:00,new_experimental_atom_feed</id><title>new (experimental) atom feed</title><content type="html">&lt;p&gt;few months ago, i decided to experiment &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/utilities/make.html&quot;&gt;make&lt;/a&gt; and &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; as a minimalistic blog/wiki engine (&lt;a href=&quot;http://werc.cat-v.org/&quot;&gt;werc&lt;/a&gt; was on my list too) to replace jekyll (i was a fan of ruby until i tried it).&lt;/p&gt;
&lt;p&gt;now i&#39;m totally happy with the basics and i need to extend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;comment posts via sending an email to the list&lt;/li&gt;
&lt;li&gt;see comments by viewing archives&lt;/li&gt;
&lt;li&gt;a simple way to maintain feeds. i wrote a little perl script to test it&lt;/li&gt;
&lt;/ul&gt;
</content><published>2014-01-17T13:24:08+01:00</published><updated>2014-01-17T13:24:08+01:00</updated></entry></feed>
